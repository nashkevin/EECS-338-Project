
[ FP Final Design Document ]
    Joel Kalos, Kevin Nash
    December 13, 2016
    
File Descriptions:
    bubble_sort.c
        Bubble sort algorithm in a single thread or parallel
    insertion_sort.c
        Insertion sort algorithm in a single thread or parallel
    merge_sort.c
        Mergesort algorithm in a single thread or parallel
    quicksort.c
        Quicksort algorithm in a single thread or parallel
    selection_sort.c
        Selection sort algorithm in a single thread or parallel
    sorting_algorithms.h
        Header file to define all sorting algorithm signatures
    sort_timer.c
        Runner file with main method. Outputs recorded times to CSV.

    The only major data structures that we are using are the randomly-populated
    int arrays that our algorithms are sorting.

    We are creating an individual C file for each of the sorting algorithms
    that we intend to implement. A runner file called sort_timer.c will run
    parallel and non-parallel versions of each sorting algorithm. Every sort
    method returns its runtime and sorts the array in memory, rather than
    returning a sorted array. These runtimes are written to CSV files. There is
    a uniquely named output file for each type of sort.

    We also intend to plot these values in an aesthetically pleasing way, using
    a custom made Python script or, time not permitting, using MS Excel.

    The single-threaded and multi-threaded versions of bubble sort are both
    implemented in bubble_sort.c and they work as expected (multi-threading
    is faster).

    Sample output can be found in bubble_sort.csv and bubble_sort_parallel.csv.

    In the future we also plan to include:
        quicksort.c
        mergesort.c
        insertion_sort.c
        selection_sort.c
